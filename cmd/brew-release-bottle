#!/usr/bin/env bash
#:   * release-bottle [options] user/repo/formula ...
#:     Builds and releases bottle for <user/repo/formula>
#:       -t|--pre-test           : Install and test formula beforehand
#:       -w|--wipe-bottles       : Wipe existing bottles stanza
#:       -V|--bump-version <ver> : Bump formula version to <ver>

# string formatters
if [[ -t 1 ]]; then
  Tty_escape() { printf "\033[%sm" "$1"; }
else
  Tty_escape() { :; }
fi
Tty_mkbold() { Tty_escape "1;${1:-39}"; }
Tty_cyan=$(Tty_mkbold 36)
Tty_reset=$(Tty_escape 0)

trap cleanup EXIT

cleanup() {
  [[ -n $tmpdir ]] || return
  echo "----- Nuking $tmpdir -----"
  rm -fr "$tmpdir"
  tmpdir=""
}

fatal() {
  echo "FATAL ERROR: $*" >&2
  exit 1
}

jquery() {
  jq -r ".[] | $*" ./.base_json
}

cmd() {
  echo "${Tty_cyan}>>> $*${Tty_reset}"
  command "$@"
}

shopt -s lastpipe
for cmd in jq gh; do
  command -v "$cmd" &>/dev/null || fatal "$cmd not available"
done

while true; do
  case "$1" in
    -t|--pre-test) pre_test=1;;
    -w|--wipe-bottles) wipe_bottles=1;;
    -nr|--no-rebuild) no_rebuild=1;;
    -V|--bump-version) new_version="$2"; shift;;
    *) break;;
  esac
  shift
done

set -e

for f in "$@"; do
  if [[ $f =~ ([^/]+)/([^/]+)/([^/]+) ]]; then
    tap=${BASH_REMATCH[1]}/${BASH_REMATCH[2]}
    ghrepo=${BASH_REMATCH[1]}/homebrew-${BASH_REMATCH[2]}
    repodir=$(brew --repo "$tap")
    fname=${BASH_REMATCH[3]}
    # First make sure the tap's up-to-date
    git -C "$repodir" pull
    tmpdir=$(mktemp -d)
    cd "$tmpdir"

    # Bump the version if needed
    if [[ -n $new_version ]]; then
      cmd brew bump-formula-pr --write --version "$new_version" "$f"
    fi

    # Clean out any existing installation
    cmd brew rm --ignore-dependencies "$f" || true

    # Pre-test if needed
    if [[ -n "$pre_test" ]]; then
      # Let's make sure it'll pass first
      echo "----- Testing $f -----"
      cmd brew install -s "$f"
      cmd brew test "$f"
      cmd brew rm --ignore-dependencies "$f"
    fi

    # Bottle & merge with the formula
    echo "----- Bottling $f in $tmpdir -----"
    cmd brew install --build-bottle "$f"
    cmd brew info --json "$f" > ./.base_json
    fver=$(jquery .versions.stable)
    if [[ -n "$wipe_bottles" || $(jquery '.bottle | length') == "0" ]]; then
      # New bottle section
      root_url=https://github.com/${ghrepo}/releases/download/${fname}-${fver}
      keep_old=()
    else
      root_url=$(jquery .bottle.stable.root_url)
      if [[ -n $no_rebuild ]]; then
        keep_old=(--no-rebuild)
      else
        keep_old=(--keep-old)
      fi
    fi
    [[ $root_url != "null" ]] || fatal "unable to determine root URL"
    cmd brew bottle --verbose --json --root-url="${root_url}" "${keep_old[@]}" "$f"
    git -C "$repodir" add Formula/"$fname".rb
    cmd brew bottle --merge --write --root-url="${root_url}" "${keep_old[@]}" ./*.json

    # Upload the new stuff
    echo "----- Uploading for $f -----"
    jq -r '.[].bottle.tags|.[]|"\(.local_filename) \(.filename)"' ./*.json | while read -r lf rf; do
      mv -v "$lf" "$rf"
      tag=${root_url##*/}
      if cmd gh release view "$tag" -R "$ghrepo" >&/dev/null; then
        # Release already created
        cmd gh release upload "$tag" "$rf" -R "$ghrepo" --clobber
      else
        # We need to create it with this new file
        cmd gh release create "$tag" "$rf" -R "$ghrepo"
      fi
    done
    git -C "$repodir" push 

    # Reinstall and test
    echo "----- Reinstalling & testing $f -----"
    cmd brew rm --ignore-dependencies "$f"
    cmd brew install "$f"
    cmd brew test "$f"

    # Clean up if necessary
    if [[ -z "$(brew uses --installed "$f")" ]]; then
      echo "----- Cleaning up $f -----"
      cmd brew rm "$f"
    fi

    cd - &> /dev/null
    cleanup
  else
    echo "WARNING: $f not in <user>/<tap>/<formula> format, skipping."
  fi
done
