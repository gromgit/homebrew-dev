#!/usr/bin/env bash
#:`brew update-local`
#:    Update local core repo against reference

# shellcheck source=../lib/funcs.sh
. "$(dirname "$0")/../lib/funcs.sh"
need_progs brew rsync gh
if [[ $(uname -s) == "Darwin" ]]; then
  need_progs sw_vers
else  # Linux
  need_progs getconf
fi

repo=$(brew --repo homebrew/core)
cd "$(dirname "$repo")" || fatal "Unable to cd to $(dirname "$repo")"
base=${repo##*/}
real=homebrew-realcore

info "START: $(basename "$0")"

[[ -d $real ]] || {
  mv "$base" "$real" || fatal "No '$base' and no '$real', can't proceed."
}
if [[ -d $base ]]; then
  info "Updating Homebrew"
  brew update || fatal "brew update failed"
  git -C "$base" pull
else
  info "Creating new Homebrew core repo"
  remote_user=${HOMEBREW_GITHUB_UPSTREAM}
  while [[ -z "$remote_user" ]]; do
    read -rp "Remote user: " remote_user
  done
  # shellcheck disable=SC2154  # $my_os defined in funcs.sh
  remote_repo=${remote_user,,}/homebrew-core-${my_os}
  base_url=https://github.com/${remote_repo}
  cmd brew tap-new --github-packages -d -v homebrew/core
  cmd git -C "$repo" remote add origin "$base_url"
  cmd gh repo create "$base_url" --public -y
  mkdir -p "$repo/.settings"
  echo "$remote_repo" > "$repo/.settings/repo"
  touch "$repo/.settings/rsync-excludes" "$repo/.settings/brewrc"
  cmd git -C "$repo" add .
  cmd git -C "$repo" commit -m "new tap repo"
  cmd git -C "$repo" push --all --set-upstream origin
fi

if [[ -s ${repo}/.settings/repo ]]; then
  base_url=https://github.com/$(<"${repo}"/.settings/repo)
else
  fatal "${repo}/.settings/repo not found"
fi
base_ghrepo=${base_url#*github.com/}

info "Correcting timestamps in real repo"
cmd brew fix-timestamps -C "$real" -f "$repo"/.settings/last_timestamp

info "Updating core repo"

rsync_opts=()
if [[ -s $base/.settings/last_commit ]]; then
  # Let git tell us what changed since the last time we updated
  cmd git -C "$real" log --pretty='format:' --name-only "$(<"$base/.settings/last_commit")"..HEAD | sort -u > "$HOMEBREW_TEMP"/rsync-includes
  [[ -s "$HOMEBREW_TEMP"/rsync-includes ]] && rsync_opts+=(--include-from="$HOMEBREW_TEMP"/rsync-includes)
fi
# Don't sync anything that's marked "sticky"
cat <<EOS > "$HOMEBREW_TEMP"/rsync-excludes
$(find -- * -type f -perm ++t)
EOS
rsync_opts+=(--exclude-from="$HOMEBREW_TEMP"/rsync-excludes)
# Add any fixed excludes
if [[ -s $base/.settings/rsync-excludes ]]; then
  rsync_opts+=(--exclude-from="$base/.settings/rsync-excludes")
fi
cmd rsync -avum "${rsync_opts[@]}" "$real"/ "$base"/

(
  cd "$base" || fatal "update: Can't cd to $base"
  if [[ -s $HOMEBREW_TEMP/rsync-includes ]]; then
    grep Formula/ "$HOMEBREW_TEMP"/rsync-includes
  else
    find Formula -type f -name \*.rb -print
  fi | while read -r f; do
    # Don't touch sticky formulae
    [[ -k $f ]] && continue
    fbase=$(basename "$f" .rb)
    if cant_build=$(can_build "$f"); then
      # Apply patch if available
      if [[ -s patches/${fbase}.patch ]] && ! git diff --exit-code "$f" ; then
        info "Patching $f"
        patch -p1 < patches/"${fbase}".patch
      fi
      if ! needs_rebottling "$f"; then
        # This formula doesn't need rebuilding
        cmd git add "$f"
        cmd git commit -m "${fbase}: no rebuilding required" "$f"
      else
        # Reset this formula's bottle block
        reset_bottle_block "$f"
      fi
    else
      cmd git add "$f"
      cmd git commit -m "${fbase}: ${cant_build}" "$f"
    fi
  done
)

# Do a Big-Bang fix at the end
cmd brew style --fix homebrew/core # || fatal "brew style failed"

(
  cd "$base" || fatal "update: Can't cd to $base"
  # Add metadata changes (except Aliases and Formula)
  for f in ./*; do
    if [[ $f != ./Aliases && $f != ./Formula ]]; then
      git add "$f"
    fi
  done
  # Automatically deal with deleted files (skipping the sticky ones)
  find ./* -perm ++t -prune -o \! -type d | while read -r f; do
    if [[ ! -e ../"$real/$f" && ! -k "$f" && "$f" != *.orig ]]; then
      warn "Removing deleted file $f"
      cmd git rm -fr "$f"
      if [[ $f == ./Formula/* ]]; then
        fname=$(basename "$f" .rb)
        if gh release view "$fname" -R "$base_ghrepo" >&/dev/null; then
          warn "Removing assets for formula $fname"
          cmd gh release delete "$fname" -R "$base_ghrepo" -y
        fi
      fi
    fi
  done
  # Update the base repo
  cmd git commit -m "Updates from $real $(date +%Y%m%d.%H%M%S)"
  cmd git push
)

# Record our last commit
git -C "$real" log --pretty=format:%H HEAD | head -1 > "$base/.settings/last_commit"

info "DONE: $(basename "$0")"
