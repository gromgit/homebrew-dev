#!/usr/bin/env bash
# Load personal standard shell library
# shellcheck source=../lib/funcs.sh
. "$(dirname "$0")/../lib/funcs.sh"
need_progs ${GNU_PREFIX}date ${GNU_PREFIX}stat

repo=${REPO:-$(brew --repo homebrew/core)}
optdir=$(brew --prefix)/opt
failed_file=${HOMEBREW_TEMP:-/brew/tmp}/$(basename "$0").failed
export HOMEBREW_GITHUB_API_TOKEN=${HOMEBREW_GITHUB_API_TOKEN:-${GITHUB_API_TOKEN}}
# .tools/bin should contain ready tools like `gh` and `timelimit`
[[ -d ${repo}/.tools/bin ]] && PATH=${repo}/.tools/bin:$PATH
shopt -s extglob

read_failed() {
  readarray -t failed < <(tr " " $'\n' < "$failed_file")
  local i; for i in "${failed[@]}"; do
    [[ $i == "|" ]] && return
  done
  # Append pipe if there isn't one already
  failed+=("|")
}

# write_failed [-o]
#   -o = overwrite existing file
write_failed() {
  local oldIFS=$IFS
  IFS=$'\n'
  if [[ $1 != "-o" ]]; then
    [[ -s "$failed_file" ]] && mv -v "$failed_file" "${failed_file}.$(${GNU_PREFIX}date -d @$(${GNU_PREFIX}stat -c %Y "$failed_file") +%Y%m%d.%H%M%S)"
  fi
  echo "${failed[*]}" > "$failed_file"
  IFS=$oldIFS
}

wrap_up() {
  [[ $(( ${#passed[@]} + ${#failed[@]} )) -gt 0 ]] || return
  write_failed
  echo "${Tty_green}Passed:${Tty_reset} ${passed[*]}"
  echo "${Tty_red}Failed:${Tty_reset} ${failed[*]}"
}
trap wrap_up EXIT

while true; do
  case "$1" in
    -i|--interactive) interactive=1;;
    *) break;;
  esac
  shift
done

cd "$repo" || fatal "Can't cd into $repo"

passed=()
[[ $# -eq 0 ]] && set -- "$failed_file"
if [[ -s $1 ]] && ! grep -q Formula "$1"; then
  # User-specified failed file
  failed_file=$1
  read_failed
else
  # Formulae listed on command line
  failed=($(formula_names "$@") "|")
fi

while [[ ${#failed[@]} -gt 0 ]]; do
  f=${failed[0]}
  if [[ $f != "|" ]]; then
    echo "${Tty_blue}>>> ${Tty_green}$f${Tty_reset} ${failed[*]:1}"
    if brew release-bottle -w -nv "$f"; then
      # Yay, we can drop this
      passed+=("$f")
      failed=("${failed[@]:1}"); write_failed -o
      if grep -q "$f" "$repo"/.tools/.list; then
        # Save a copy of the upgraded tool(s)
        for prog in "${optdir}/${f}/bin"/*; do
          dest_prog=${repo}/.tools/bin/${prog##*/}
          [[ $prog -nt $dest_prog ]] || continue
          [[ -e $dest_prog ]] && cmd mv -fv "$dest_prog" "$dest_prog".bkup
          cmd ln -fv "$prog" "$dest_prog"
        done
      fi
    elif [[ -n $interactive ]]; then
      # Ask user what to do next
      while true; do
        read -erp "${Tty_red}>>> ${Tty_blue}$f${Tty_reset} failed, (r)etry now, (p)repend <formula>, retry ${Tty_green}(l)${Tty_reset}ater, (d)rop, (e)dit list, (s)hell out, (q)uit? " ans
        case "${ans,,}" in
          q*) exit 0;;
          r*) continue 2;;
          p*)
            f2=${ans:1}
            failed2=(); for f3 in $f2; do
              f3=${f3//,}
              if [[ -s Formula/${f3}.rb ]]; then
                failed2+=("${f3}")
              else
                warn "Formula ${Tty_green}${f3}${Tty_reset} not found, skipping."
              fi
            done
            failed=("${failed2[@]}" "${failed[@]}")
            write_failed -o
            break
          ;;
          d*) failed=("${failed[@]:1}"); write_failed -o; break;;
          e*) write_failed -o; ${EDITOR:-vi} "$failed_file"; read_failed; break;;
          s*) "$SHELL" -i;;
          l*) failed=("${failed[@]:1}" "$f"); write_failed -o; break;;
        esac
      done
    else
      # Keep it for later
      failed=("${failed[@]:1}" "$f"); write_failed -o
    fi
  else
    # Finished one cycle
    failed=("${failed[@]:1}" "|")
    nfailed=$((${#failed[@]} - 1))
    if [[ $nfailed -gt 0 ]]; then
      read -erp "${Tty_red}>>> ${Tty_reset}$nfailed formulae left to process, run again? (Y|n) "
      [[ ${REPLY,,} == n* ]] && break
      write_failed -o
      # We force interactivity the second time around
      interactive=1
    else
      # Nothing left to process
      break
    fi
  fi
done
